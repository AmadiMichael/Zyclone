
/**
 * Houses
 * - isKnownRoot helper function
 * - ReentrancyGuard modifier
 * - TransferEth helper function
 */



/**
 * @dev Loops through all 30 storage cached roots and continues execution as soon as 
 * any of these roots is equal to the value at the top of the stack.
 */
#define macro IS_KNOWN_ROOT() = {

}


/**
 * @dev nonpayable modifier
 *
 */
#define macro NON_PAYABLE() = takes (0) returns (0) {
    callvalue                                                               // [callvalue]
    iszero                                                                  // [iszero(callvalue)]
    nonpayable_jumpdest                                                     // [nonpayable_jumpdest, iszero(callvalue)]]
    jumpi                                                                   // []

    0x00                                                                    // [0x00]
    0x00                                                                    // [0x00, 0x00]
    revert                                                                  // []

    nonpayable_jumpdest:                                                    // []
}




/**
 * @dev Transfers [DENOMINATION] ether to address at the top of the stack, returning a boolean representing if the call was successful or not
 */
#define macro TRANSFER_ETH() = {
    // Input stack:                 [to, amount]
    // Output stack:                []

    0x00                                                                    // [0x00, to, amount]
    0x00                                                                    // [0x00, 0x00, to, amount]
    0x00                                                                    // [0x00, 0x00, 0x00, to, amount]
    0x00                                                                    // [0x00, 0x00, 0x00, 0x00, to, amount]
    swap5                                                                   // [amount, 0x00, 0x00, 0x00, to, 0x00]
    swap1                                                                   // [0x00, amount, 0x00, 0x00, to, 0x00]
    swap4                                                                   // [to, amount, 0x00, 0x00, 0x00, 0x00]
    gas                                                                     // [gas, to, amount, 0x00, 0x00, 0x00, 0x00]
    call                                                                    // [call_success]
    transfer_eth_jumpdest                                                   // [transfer_eth_jumpdest, call_success] 
    jumpi                                                                   // []

    // `ETHTransferFailed()` error
    0xb12d13eb                                                              // [ETHTransferFailed_error_sig]
    0x00                                                                    // [0x00, ETHTransferFailed_error_sig]
    mstore                                                                  // []
    0x04                                                                    // [0x04]
    0x1c                                                                    // [0x1c, 0x04]
    revert                                                                  // []

    transfer_eth_jumpdest:
}



/**
 * @dev
 */
#define macro RETURN_32_BYTES() = takes(1) {
    // Stack input:                     [val]

    0x00                                                                    // [0x00, val]
    mstore                                                                  // []

    0x20                                                                    // [0x20]
    0x00                                                                    // [0x00, 0x20]
    return                                                                  // []
}







#define macro INTERNAL_DENOMINATION() = takes(0) returns(1) {
    // Stack input:                     []
    // Stack output:                    [denomination]

    [__DENOMINATION]                                                        // [denomination]
}


#define macro INTERNAL_CURRENT_ROOT_INDEX() = takes(0) returns(1) {
    // Stack input:                     []
    // Stack output:                    [currentRootIndex]

    [__CURRENT_ROOT_INDEX]                                                  // [currentRootIndex.slot]
    sload                                                                   // [currentRootIndex]
}


#define macro INTERNAL_NEXT_LEAF_INDEX() = takes(0) returns(1) {
    // Stack input:                     []
    // Stack output:                    [nextIndex]

    [__NEXT_LEAF_INDEX]                                                     // [nextIndex.slot]
    sload                                                                   // [nextIndex]
}



#define macro INTERNAL_ROOTS() = takes(1) returns(1) {
    // Stack input:                     [index]
    // Stack output:                    [slot]

    [__ROOTS]                                                               // [roots.slot, index]
    add                                                                     // [roots[index].slot]
}



#define macro INTERNAL_NULLIFIER_HASHES() = takes(1) returns(1) {
    // Stack input:                     [nullifierHash]
    // Stack output:                    [slot]

    0x00                                                                    // [0x00, nullifierHash]
    mstore                                                                  // []
    [__NULLIFIER_HASHES]                                                    // [nullifierHash.slot]
    0x20                                                                    // [0x20, nullifierHash.slot]
    mstore                                                                  // []

    0x40                                                                    // [0x40]
    0x00                                                                    // [0x00, 0x40]
    sha3                                                                    // [slot]
}



#define macro INTERNAL_PENDING_COMMIT() = takes(1) returns(1) {
    // Stack input:                     [address]
    // Stack output:                    [slot]

    0x00                                                                    // [0x00, address]
    mstore                                                                  // []
    [__PENDING_COMMIT]                                                      // [pendingCommit.slot]
    0x20                                                                    // [0x20, pendingCommit.slot]
    mstore                                                                  // []

    0x40                                                                    // [0x40]
    0x00                                                                    // [0x00, 0x40]
    sha3                                                                    // [slot]
}