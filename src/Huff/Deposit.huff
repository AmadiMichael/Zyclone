
/**
 * Houses
 * - Deposit external function
 * - Commit external function
 * - Clear external function
 */


/**
 * @dev lets users add their committed commitmentHash to the current merkle root
 * 
 * Calldata layout
 * 
 * 0x00 <-> 0x04: bytes4(keccak256("deposit((uint256[2],uint256[2][2],uint256[2]),bytes32)"))
 * 0x04 <-> 0x24: _pA[0]
 * 0x24 <-> 0x44: _pA[1]
 * 0x44 <-> 0x64: _pB[0][0]
 * 0x64 <-> 0x84: _pB[0][1]
 * 0x84 <-> 0xa4: _pB[1][0]
 * 0xa4 <-> 0xc4: _pB[1][1]
 * 0xc4 <-> 0xe4: _pC[0]
 * 0xe4 <-> 0x104: _pC[1]
 * 0x104 <-> 0x124: newRoot
 */
#define macro DEPOSIT() = {
    // make function non payable
    NON_PAYABLE()

    [__DEPOSIT_VERIFIER]
}


/**
 * @dev lets users commit with 1 ether and a commitment hash which they can add into the tree whenever they want by calling deposit
 *
 * Calldata layout
 * 
 * 0x00 <-> 0x04: bytes4(keccak256("commit(bytes32)"))
 * 0x04 <-> 0x24: _commitment
 */
#define macro COMMIT() = {
    [__PENDING_COMMIT]                                                          // [pendingCommit]
    caller                                                                      // [msg.sender, pendingCommit]
    0x00                                                                        // [0x00, msg.sender, pendingCommit]
    mstore                                                                      // [pendingCommit]
    0x20                                                                        // [0x20, pendingCommit]
    mstore                                                                      // []

    0x20                                                                        // [size]
    0x00                                                                        // [offSet, size]
    sha3                                                                        // [pendingCommitSlot]

    dup1                                                                        // [pendingCommitSlot, pendingCommitSlot]
    sload                                                                       // [pendingCommit[msg.sender], pendingCommitSlot]
    0x00                                                                        // [0x00, pendingCommit[msg.sender], pendingCommitSlot]
    eq                                                                          // [bool, pendingCommitSlot]
    iszero                                                                      // [iszero(bool), pendingCommitSlot]
    err1Jump                                                                    // [err1Jump, pendingCommitSlot]
    jumpi                                                                       // [pendingCommitSlot]

    [__FIELD_SIZE]                                                              // [fieldSize, pendingCommitSlot]
    0x04                                                                        // [0x04, fieldSize, pendingCommitSlot]
    calldataload                                                                // [_commitment, fieldSize, pendingCommitSlot]
    swap1                                                                       // [fieldSize, _commitment, pendingCommitSlot]
    dup2                                                                        // [_commitment, fieldSize, _commitment, pendingCommitSlot]
    gt                                                                          // [bool, _commitment, pendingCommitSlot]
    err2Jump                                                                    // [err2Jump, _commitment, pendingCommitSlot]
    jumpi                                                                       // [_commitment, pendingCommitSlot]

    PROCESS_DEPOSIT()                                                           // [_commitment, pendingCommitSlot]
    swap1                                                                       // [pendingCommitSlot, _commitment]
    sstore                                                                      // []
    stop

    err1Jump:
        pop                                                                     // []
        0x00                                                                    // [0x00]
        0x00                                                                    // [0x00, 0x00]
        revert                                                                  // []

    err2Jump:
        pop pop                                                                 // []
        0x00                                                                    // [0x00]
        0x00                                                                    // [0x00, 0x00]
        revert                                                                  // []
}


/**
 * @dev Let users delete a previously committed commitment hash and withdraw 1 ether they deposited alongside it
 *
 * Calldata layout
 * 
 * 0x00 <-> 0x04: bytes4(keccak256("clear()"))
 */
#define macro CLEAR() = {
    // make function non payable
    NON_PAYABLE()

    [__PENDING_COMMIT]                                                          // [pendingCommit]
    caller                                                                      // [msg.sender, pendingCommit]
    0x00                                                                        // [0x00, msg.sender, pendingCommit]
    mstore                                                                      // [pendingCommit]
    0x20                                                                        // [0x20, pendingCommit]
    mstore                                                                      // []

    0x20                                                                        // [size]
    0x00                                                                        // [offSet, size]
    sha3                                                                        // [pendingCommitSlot]

    0x00                                                                        // [0x00, pendingCommitSlot]
    swap1                                                                       // [pendingCommitSlot, 0x00]
    sstore                                                                      // []

    0x00                                                                        // [fee]
    0x00                                                                        // [relayer, fee]
    caller                                                                      // [recipient, relayer, fee]
    PROCESS_WITHDRAW()                                                          // []
}