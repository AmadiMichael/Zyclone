
#include "./Zyclone.huff"


#define macro CONSTRUCTOR() = takes(0) returns(0) {
    0x2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb
    [__ROOTS]
    sstore
}


#define macro MAIN() = takes(0) returns(0) {
    ZYCLONE_MAIN()
}



#define macro PROCESS_DEPOSIT() = {
    // revert if callvalue is not equal to denomination
    callvalue                                                           // [callvalue]
    [__DENOMINATION]                                                    // [denomination, callvalue]
    eq                                                                  // [eq(denomination, callvalue)]
    process_deposit_jumpdest                                            // [process_deposit_jumpdest, eq(denomination, callvalue)]
    jumpi                                                               // []


    0x08c379a000000000000000000000000000000000000000000000000000000000  // [bytes4(keccak256("Error(string)"))]
    0x00                                                                // [0x80, [bytes4(keccak256("Error(string)"))]]
    mstore                                                              // []
    0x20                                                                // [0x20]
    0x04                                                                // [0x04, 0x20]
    mstore                                                              // []
    0x35                                                                // [len]
    0x24                                                                // [0x24, len]
    mstore                                                              // []
    0x506c656173652073656e64206044656e6f6d696e6174696f6e60204554482061  // [first-32-bytes]
    0x44                                                                // [0x44, first-32-bytes]
    mstore                                                              // []
    0x6c6f6e672077697468207472616e73616374696f6e0000000000000000000000  // [last-bytes]
    0x64                                                                // [0x64, last-bytes]
    mstore                                                              // []
        
    0x84                                                                // [0x84]
    0x00                                                                // [0x00, 0x84]
    revert                                                              // []

    process_deposit_jumpdest:
}

#define macro PROCESS_WITHDRAW() = {
    // Input stack:                 [recipient, relayer, fee]
    // Output stack:                []

    // transfer
    dup3                                                                // [fee, recipient, relayer, fee]
    [__DENOMINATION]                                                    // [denomination, fee, recipient, relayer, fee]
    sub                                                                 // [amount, recipient, relayer, fee]
    swap1                                                               // [recipient, amount, relayer, fee]
    TRANSFER_ETH()                                                      // [relayer, fee]


    // if fee > 0 transfer
    dup2                                                                // [fee, relayer, fee]
    iszero                                                              // [iszero(fee), relayer, fee]
    pop_off_top_2_stack                                                 // [pop_off_top_2_stack, iszero(fee), relayer, fee]
    jumpi                                                               // [relayer, fee]

    TRANSFER_ETH()                                                      // []
    process_withdraw_continue                                           // [process_withdraw_continue]
    jump                                                                // []


    pop_off_top_2_stack:                                                // [relayer, fee]
        pop                                                             // [fee]
        pop                                                             // []

    process_withdraw_continue:
}